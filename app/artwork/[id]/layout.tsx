import type { Metadata } from 'next';
import React from 'react';
import { NEXT_PUBLIC_URL } from '@/src/Constants';
import fetchTokenDetails from '@/src/TokenDetailsFetcher';
import { fetchArtworkImageUrl } from '@/src/ArtworkImageFetcher';

type Props = { params: { id: string } };

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  console.log(`[generateMetadata] Generating metadata for anglez #${params.id}`);
  const id = parseInt(params.id, 10);
  const url = `${NEXT_PUBLIC_URL}/artwork/${params.id}`;
  // Build title/description first
  let tokenTitle = `anglez #${params.id}`;
  try {
    const token = await fetchTokenDetails(id);
    if (token) {
      tokenTitle = `anglez #${params.id} · ${token.attributes.shapeCount} shapes · ${token.attributes.style} · ${token.attributes.structure}`;
    }
  } catch {}

  const pageMetadata: Metadata = {
    title: tokenTitle,
    description: `anglez.xyz is abstract, generative NFT art that is fully on-chain and 100% generated by Solidity code on Base!`,
    alternates: { canonical: url },
    openGraph: {
      title: tokenTitle,
      description: `anglez.xyz is abstract, generative NFT art that is fully on-chain and 100% generated by Solidity code on Base!`,
      url,
      type: 'website',
    },
    twitter: {
      card: 'summary_large_image',
      site: '@volstrate',
      creator: '@volstrate',
      title: tokenTitle,
      description: `anglez.xyz is abstract, generative NFT art that is fully on-chain and 100% generated by Solidity code on Base!`,
    },
  };

  // Only attempt Blob image generation when a token is configured locally
  console.log(`[generateMetadata] Checking for Blob image generation for anglez #${params.id}`);
  const artworkImageUrl = await fetchArtworkImageUrl(id);

  if (artworkImageUrl) {
    (pageMetadata.openGraph as any).images = [
      { url: artworkImageUrl, width: 1200, height: 1200, alt: `anglez #${params.id}` },
    ];
    (pageMetadata.twitter as any).images = [artworkImageUrl];
  }

  return pageMetadata;
}

export default function ArtworkLayout({ children }: { children: React.ReactNode }) {
  return <>{children}</>;
}
